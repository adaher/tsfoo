module.exports = function(grunt) {
    grunt.initConfig({
        clean: { main: [ 'compiled', 'dist' ] },
        dom_munger: {
            almond: {
                dest: 'dist/default.htm',
                options: {
                    append: {
                        html: '<script src="dist/bundle.js"></script>',
                        selector: 'head'
                    },
                    remove: 'script[src="vendor/require.js"]'
                },
                src: 'default.htm'
            },
            options: { prepend: {
                html: '<base href="..">',
                selector: 'head'
            } },
            rjs: {
                dest: 'dist/default.htm',
                options: { update: {
                    attribute: 'data-main',
                    selector: 'script[src="vendor/require.js"]',
                    value: 'dist/bundle'
                } },
                src: 'default.htm'
            }
        },
        fix_maps: { main: {
            dest: 'dist/bundle.js.map',
            options: { basePath: '../compiled' },
            src: 'dist/bundle.js.map'
        } },
        requirejs: {
            almond: { options: {
                include: 'app',
                name: 'almond'
            } },
            options: {
                baseUrl: 'compiled',
                findNestedDependencies: true,
                generateSourceMaps: true,
                insertRequire: [ 'app' ],
                optimize: 'none',
                out: 'dist/bundle.js',
                paths: {
                    almond: '../vendor/almond',
                    jquery: '../vendor/jquery'
                },
                wrap: true
            },
            rjs: { options: { name: 'app' } }
        },
        typescript: {
            amd: {
                dest: 'compiled',
                options: { module: 'amd' },
                src: [ 'src/**/*.ts' ]
            },
            amd_for_bundle: {
                dest: 'compiled',
                options: {
                    comments: false,
                    sourceMap: false
                },
                src: [ 'src/**/*.ts' ]
            },
            options: {
                basePath: 'src',
                comments: true,
                module: 'amd',
                sourceMap: true
            }
        },
        uglify: { bundle: {
            dest: 'dist/bundle.js',
            options: {
                sourceMap: true,
                sourceMapIn: 'dist/bundle.js.map',
                sourceMapName: 'dist/bundle.js.map'
            },
            src: 'dist/bundle.js'
        } }
    });
    require('load-grunt-tasks')(grunt);
    grunt.registerTask('default', [ 'clean', 'typescript:amd' ]);
    grunt.registerTask('rjs', [ 'clean', 'typescript:amd_for_bundle', 'requirejs:rjs', 'fix_maps', 'dom_munger:rjs' ]);
    grunt.registerTask('almond', [ 'clean', 'typescript:amd_for_bundle', 'requirejs:almond', 'fix_maps', 'dom_munger:almond' ]);
    grunt.registerMultiTask('fix_maps', 'Fix source maps generated by r.js', function() {
        var basePath = this.options().basePath;
        this.files.forEach(function(file) {
            file.src.forEach(function(src) {
                var map = grunt.file.readJSON(src);
                delete map.file;
                for (var i = 0; i < map.sources.length; i++) {
                    var entry = map.sources[i];
                    if (entry.indexOf('/') === -1) {
                        entry = basePath + '/' + entry;
                    }
                    map.sources[i] = entry;
                }
                grunt.file.write(file.dest, JSON.stringify(map));
                grunt.log.writeln('Source map ' + src + ' has been fixed');
            });
        });
    });
};