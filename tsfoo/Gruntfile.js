/*jshint node:true*/
module.exports = function(grunt) {
    grunt.initConfig({

        clean: {
            main: [ 'compiled', 'dist' ]
        },

        typescript: {
            options: {
                basePath: 'src',
                comments: true,
                module: 'amd',
                sourceMap: true
            },
            amd: {
                dest: 'compiled',
                options: { module: 'amd' },
                src: [ 'src/**/*.ts' ]
            },
            amd_for_rjs: {
                dest: 'compiled',
                options: {
                    comments: false,
                    // r.js doesn't support input source maps for now
                    // see https://github.com/jrburke/r.js/issues/470
                    sourceMap: false
                },
                src: [ 'src/**/*.ts' ]
            }
        },

        requirejs: {
            options: {
                baseUrl: 'compiled',
                findNestedDependencies: true,
                generateSourceMaps: true,
                insertRequire: [ 'app' ],
                optimize: 'none',
                out: 'dist/bundle.js',
                paths: {
                    almond: '../vendor/almond',
                    jquery: '../vendor/jquery'
                },
                wrap: true
            },
            rjs: {
                options: {
                    name: 'app'
                }
            },
            almond: {
                options: {
                    include: 'app',
                    name: 'almond'
                }
            }
        },

        fix_maps: {
            main: {
                dest: 'dist/bundle.js.map',
                options: { basePath: '../compiled' },
                src: 'dist/bundle.js.map'
            }
        },

        uglify: {
            bundle: {
                dest: 'dist/bundle.js',
                options: {
                    sourceMap: true,
                    sourceMapIn: 'dist/bundle.js.map',
                    sourceMapName: 'dist/bundle.js.map'
                },
                src: 'dist/bundle.js'
            }
        }
    });

    require('load-grunt-tasks')(grunt);

    grunt.registerTask('default', [ 'clean', 'typescript:amd' ]);
    grunt.registerTask('rjs', [ 'clean', 'typescript:amd_for_rjs', 'requirejs:rjs', 'fix_maps' ]);
    grunt.registerTask('almond', [ 'clean', 'typescript:amd_for_rjs', 'requirejs:almond', 'fix_maps' ]);

    grunt.registerMultiTask('fix_maps', 'Fix source maps generated by r.js', function() {
        var basePath = this.options().basePath;
        this.files.forEach(function(file) {
            file.src.forEach(function(src) {
                var map = grunt.file.readJSON(src);
                delete map.file;
                for (var i = 0; i < map.sources.length; i++) {
                    var entry = map.sources[i];
                    if (entry.indexOf('/') === -1) {
                        entry = basePath + '/' + entry;
                    }
                    map.sources[i] = entry;
                }
                grunt.file.write(file.dest, JSON.stringify(map));
                grunt.log.writeln('Source map ' + src + ' has been fixed');
            });
        });
    });
};